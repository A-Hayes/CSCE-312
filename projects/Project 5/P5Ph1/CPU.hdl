// Asa Hayes   525003952

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //In diagram from slides, 1st Mux16
    Not(in=instruction[15], out=AorC);
    Mux16(a=outALU,b=instruction, sel=AorC, out=toAReg);
    
    //make sure instruct is either A-instruct or A-Reg load (bit5=true)
    Or(a=AorC,b=instruction[5], out=loadAReg);
    ARegister(in=toAReg, load=loadAReg, out=outAReg, out[0..14]=addressM);
    
    //In diagram from slides, 2nd Mux16
    And(a=instruction[15],b=instruction[12], out=ifMInstr);
    Mux16(a=outAReg,b=inM, sel=ifMInstr, out=ARegOrInM);
    
    //Determine if load D-Reg
    And(a=instruction[15],b=instruction[4], out=loadDReg);
    DRegister(in=outALU, load=loadDReg, out=outDReg);
    
    ALU(x=outDReg,y=ARegOrInM, zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6], zr=zr,ng=ng,  out=outALU, out=outM);
    
    And(a=instruction[15],b=instruction[3], out=writeM);
    
    //block for operations to check if JMP needed
    Not(in=ng, out=ifPosALU);
    Not(in=zr, out=ifNonZeroALU);
    
    And(a=instruction[15],b=instruction[0], out=ifJGT);
    And(a=instruction[15],b=instruction[1], out=ifJEQ);
    And(a=instruction[15],b=instruction[2], out=ifJLT);
    
    And(a=ifPosALU,b=ifNonZeroALU, out=ifGrEq1);
    And(a=ifJGT,b=ifGrEq1, out=loadGT);
    And(a=ifJEQ,b=zr, out=loadEQ);
    And(a=ifJLT,b=ng, out=loadLT);
    
    Or(a=loadGT,b=loadEQ, out=loadGTEQ);
    Or(a=loadLT,b=loadGTEQ, out=loadPC);
    
    PC(in=outAReg, load=loadPC, reset=reset,inc=true, out[0..14]=pc);
    
   
}